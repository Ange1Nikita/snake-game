{"version":3,"file":"js/app.0bd6f2c0.js","mappings":"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","sources":["webpack://snake-game/./src/App.vue","webpack://snake-game/./src/components/SnakeGame.vue","webpack://snake-game/./src/components/SnakeGame.vue?4a62","webpack://snake-game/./src/App.vue?7ccd","webpack://snake-game/./src/main.js","webpack://snake-game/webpack/bootstrap","webpack://snake-game/webpack/runtime/chunk loaded","webpack://snake-game/webpack/runtime/define property getters","webpack://snake-game/webpack/runtime/global","webpack://snake-game/webpack/runtime/hasOwnProperty shorthand","webpack://snake-game/webpack/runtime/jsonp chunk loading","webpack://snake-game/webpack/startup"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <SnakeGame />\n  </div>\n</template>\n\n<script>\nimport SnakeGame from './components/SnakeGame.vue';\n\nexport default {\n  components: {\n    SnakeGame,\n  },\n};\n</script>","<template>\r\n    <div class=\"game-container\">\r\n        <h1>Змейка</h1>\r\n        <div class=\"theme-buttons\">\r\n            <button @click=\"changeTheme('classic')\">Классическая тема</button>\r\n            <button @click=\"changeTheme('night')\">Ночная тема</button>\r\n            <button @click=\"changeTheme('space')\">Космическая тема</button>\r\n        </div>\r\n        <div class=\"score-board\">\r\n            <p>Счёт: {{ score }}</p>\r\n            <p>Рекорд: {{ highScore }}</p>\r\n        </div>\r\n        <canvas ref=\"gameCanvas\" :width=\"canvasSize\" :height=\"canvasSize\" @touchstart=\"handleTouchStart\"\r\n            @touchmove=\"handleTouchMove\" @touchend=\"handleTouchEnd\"></canvas>\r\n        <p v-if=\"gameOver\">Игра окончена! Нажмите на экран для перезапуска.</p>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    data() {\r\n        return {\r\n            canvasSize: 400,\r\n            gridSize: 20,\r\n            snake: [{ x: 10, y: 10 }],\r\n            food: { x: 15, y: 15 },\r\n            direction: { x: 0, y: 0 },\r\n            gameOver: false,\r\n            touchStartX: null,\r\n            touchStartY: null,\r\n            score: 0,\r\n            highScore: 0,\r\n            foodColorPhase: 0,\r\n            flowers: [], // Массив для хранения цветов\r\n            maxFlowers: 10,\r\n            grass: [], // Массив для хранения травы\r\n            maxGrass: 50, // Максимальное количество травинок\r\n            grassAnimationPhase: 0, // Фаза анимации травы\r\n            comets: [], // Массив для хранения комет\r\n            cometInterval: null, // Таймер для генерации комет\r\n            maxComets: 5,\r\n            stars: [], // Массив для хранения звёзд\r\n            maxStars: 50, // Максимальное количество звёзд\r\n            starBlinkInterval: null, // Таймер для мигания звёзд\r\n            speed: 0.2, // Скорость движения (часть клетки за шаг)\r\n            initialSpeed: 0.2, // Начальная скорость\r\n            headPosition: { x: 10, y: 10 }, // Плавные координаты головы\r\n            gameLoopTimer: null, // Храним ID таймера\r\n            updateInterval: 100, // Интервал обновления состояния игры (в миллисекундах)\r\n            frameRate: 60, // Частота кадров для отрисовки (в FPS)\r\n            lastUpdateTime: 0, // Время последнего обновления состояния игры\r\n            currentTheme: \"classic\", // Текущая тема\r\n            themes: {\r\n                classic: {\r\n                    background: [\"#87CEEB\", \"#98FB98\"], // Градиент фона\r\n                    snake: { fill: \"green\", stroke: \"darkgreen\" }, // Цвет змейки\r\n                    food: { stroke: \"darkred\" }, // Цвет еды\r\n                },\r\n                night: {\r\n                    background: [\"#000033\", \"#1a1a4d\"], // Тёмный фон\r\n                    snake: { fill: \"#00ff00\", stroke: \"#00cc00\" }, // Светящаяся змейка\r\n                    food: { stroke: \"#ff4500\" }, // Оранжевая еда\r\n                },\r\n                space: {\r\n                    background: [\"#000000\", \"#000033\"], // Космический фон\r\n                    snake: { fill: \"#ffffff\", stroke: \"#cccccc\" }, // Белая змейка\r\n                    food: { stroke: \"#ffff00\" }, // Жёлтая еда\r\n                },\r\n            },\r\n        };\r\n    },\r\n    mounted() {\r\n        // Загружаем сохранённую тему\r\n        const savedTheme = localStorage.getItem(\"currentTheme\");\r\n        if (savedTheme && this.themes[savedTheme]) {\r\n            this.currentTheme = savedTheme; // Устанавливаем сохранённую тему\r\n        } else {\r\n            this.currentTheme = \"classic\"; // По умолчанию устанавливаем классическую тему\r\n        }\r\n\r\n        this.startGame();\r\n        window.addEventListener(\"keydown\", this.handleKeyDown);\r\n\r\n        // Начинаем генерацию комет\r\n        this.startCometSpawning();\r\n    },\r\n    beforeUnmount() {\r\n        window.removeEventListener(\"keydown\", this.handleKeyDown);\r\n        this.stopCometSpawning();\r\n    },\r\n    methods: {\r\n        generateFlowers() {\r\n            this.flowers = []; // Очищаем массив цветов\r\n\r\n            for (let i = 0; i < this.maxFlowers; i++) {\r\n                const flower = {\r\n                    x: Math.random() * this.canvasSize, // Случайная позиция по X\r\n                    y: Math.random() * this.canvasSize, // Случайная позиция по Y\r\n                    coreSize: Math.random() * 3 + 2, // Размер сердцевины (от 2 до 5)\r\n                    petalSize: Math.random() * 5 + 3, // Размер внешних кругов (от 3 до 8)\r\n                    coreColor: `hsl(${Math.random() * 60}, 100%, 50%)`, // Цвет сердцевины (жёлтый/оранжевый)\r\n                    petalColor: `hsl(${Math.random() * 360}, 70%, 50%)`, // Цвет внешних кругов (разные оттенки)\r\n                };\r\n\r\n                this.flowers.push(flower); // Добавляем цветок в массив\r\n            }\r\n        },\r\n        generateGrass() {\r\n            this.grass = []; // Очищаем массив травы\r\n\r\n            for (let i = 0; i < this.maxGrass; i++) {\r\n                const grass = {\r\n                    x: Math.random() * this.canvasSize, // Случайная позиция по X\r\n                    y: Math.random() * this.canvasSize, // Случайная позиция по Y\r\n                    size: Math.random() * 10 + 5, // Размер от 5 до 15\r\n                    swayPhase: Math.random() * Math.PI * 2, // Фаза колыхания (начинается случайно)\r\n                };\r\n\r\n                this.grass.push(grass); // Добавляем травинку в массив\r\n            }\r\n        },\r\n        generateStars() {\r\n            this.stars = []; // Очищаем массив звёзд\r\n\r\n            for (let i = 0; i < this.maxStars; i++) {\r\n                const star = {\r\n                    x: Math.random() * this.canvasSize, // Случайная позиция по X\r\n                    y: Math.random() * this.canvasSize, // Случайная позиция по Y\r\n                    size: Math.random() * 1.5 + 0.5, // Размер от 0.5 до 2\r\n                    blinkPhase: Math.random() * Math.PI * 2, // Фаза мигания (начинается случайно)\r\n                };\r\n\r\n                this.stars.push(star); // Добавляем звезду в массив\r\n            }\r\n        },\r\n        spawnComet() {\r\n            if (this.comets.length >= this.maxComets) return;\r\n\r\n            const maxX = this.canvasSize / this.gridSize - 1;\r\n\r\n            const newComet = {\r\n                x: Math.random() * maxX, // Случайная позиция по X\r\n                y: -1, // Комета начинается за пределами экрана\r\n                speed: Math.random() * 0.3 + 0.1, // Скорость от 0.1 до 0.4\r\n                size: Math.random() * 2 + 1, // Размер кометы от 1 до 3\r\n            };\r\n\r\n            this.comets.push(newComet); // Добавляем комету в массив\r\n        },\r\n        startCometSpawning() {\r\n            this.cometInterval = setInterval(() => {\r\n                if (this.currentTheme === \"space\") {\r\n                    this.spawnComet(); // Генерируем новую комету\r\n                }\r\n            }, 2000); // Генерация комет каждые 2 секунды\r\n        },\r\n        stopCometSpawning() {\r\n            clearInterval(this.cometInterval); // Останавливаем генерацию комет\r\n        },\r\n        changeTheme(themeName) {\r\n            if (this.currentTheme !== themeName) {\r\n                this.currentTheme = themeName;\r\n                localStorage.setItem(\"currentTheme\", themeName); // Сохраняем тему в localStorage\r\n                console.log(`Тема изменена на: ${themeName}`);\r\n\r\n                if (themeName === \"classic\") {\r\n                    this.generateGrass(); // Генерируем траву\r\n                    this.generateFlowers(); // Генерируем цветы\r\n                } else if (themeName === \"night\") {\r\n                    this.generateStars(); // Генерируем звёзды\r\n                }\r\n\r\n                this.drawGame(); // Перерисовываем игру\r\n            }\r\n        },\r\n        startGame() {\r\n            this.snake = [{ x: 10, y: 10 }];\r\n            this.food = { x: 15, y: 15 };\r\n            this.direction = { x: 0, y: 0 };\r\n            this.gameOver = false;\r\n            this.score = 0; // Сбрасываем счёт\r\n            this.speed = this.initialSpeed; // Сбрасываем скорость\r\n            this.headPosition = { x: 10, y: 10 }; // Сбрасываем плавные координаты головы\r\n            this.lastUpdateTime = Date.now(); // Сбрасываем время последнего обновления\r\n\r\n            // Запускаем отрисовку игры\r\n            this.gameLoop();\r\n\r\n            // Запускаем обновление состояния игры\r\n            this.updateGameState();\r\n        },\r\n        updateGameState() {\r\n            const currentTime = Date.now();\r\n            const deltaTime = currentTime - this.lastUpdateTime;\r\n\r\n            // Обновляем состояние игры только если прошло достаточно времени\r\n            if (deltaTime >= this.updateInterval) {\r\n                this.lastUpdateTime = currentTime;\r\n\r\n                let head = {\r\n                    x: this.snake[0].x + this.direction.x,\r\n                    y: this.snake[0].y + this.direction.y,\r\n                };\r\n\r\n                // Проверяем выход за границы\r\n                if (head.x < 0) head.x = this.canvasSize / this.gridSize - 1; // Слева направо\r\n                if (head.x >= this.canvasSize / this.gridSize) head.x = 0; // Справа налево\r\n                if (head.y < 0) head.y = this.canvasSize / this.gridSize - 1; // Сверху вниз\r\n                if (head.y >= this.canvasSize / this.gridSize) head.y = 0; // Снизу вверх\r\n\r\n                // Добавляем новую голову в начало массива\r\n                this.snake.unshift({ x: head.x, y: head.y });\r\n\r\n                // Проверяем столкновение с едой\r\n                if (head.x === this.food.x && head.y === this.food.y) {\r\n                    this.spawnFood(); // Генерируем новую еду\r\n                    this.score++;\r\n                    if (this.score > this.highScore) {\r\n                        this.highScore = this.score;\r\n                    }\r\n                    this.playSound(\"sounds/eat.mp3\"); // Звук поедания яблока\r\n\r\n                    // Увеличиваем скорость\r\n                    if (this.speed < 1) {\r\n                        this.speed += 0.01;\r\n                    }\r\n                } else {\r\n                    // Удаляем хвост, если еда не съедена\r\n                    this.snake.pop();\r\n                }\r\n\r\n                // Проверяем столкновение с самой собой\r\n                if (\r\n                    this.snake\r\n                        .slice(1) // Исключаем голову\r\n                        .some(segment => segment.x === head.x && segment.y === head.y)\r\n                ) {\r\n                    this.gameOver = true;\r\n                    this.playSound(\"sounds/game-over.mp3\"); // Звук окончания игры\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // Рекурсивно вызываем обновление состояния игры\r\n            requestAnimationFrame(() => this.updateGameState());\r\n        },\r\n        gameLoop() {\r\n            if (this.gameOver || !this.$refs.gameCanvas) return;\r\n\r\n            // Плавное обновление координат головы\r\n            this.headPosition.x += (this.snake[0].x - this.headPosition.x) * this.speed;\r\n            this.headPosition.y += (this.snake[0].y - this.headPosition.y) * this.speed;\r\n\r\n            // Обработка выхода за границы для плавных координат\r\n            if (this.headPosition.x < 0) this.headPosition.x += this.canvasSize / this.gridSize;\r\n            if (this.headPosition.x >= this.canvasSize / this.gridSize) this.headPosition.x -= this.canvasSize / this.gridSize;\r\n            if (this.headPosition.y < 0) this.headPosition.y += this.canvasSize / this.gridSize;\r\n            if (this.headPosition.y >= this.canvasSize / this.gridSize) this.headPosition.y -= this.canvasSize / this.gridSize;\r\n\r\n            // Обновляем фазу цвета еды для анимации\r\n            this.foodColorPhase += 0.05; // Увеличиваем фазу для плавного изменения цвета\r\n\r\n            // Обновляем фазу анимации травы\r\n            if (this.currentTheme === \"classic\") {\r\n                this.grassAnimationPhase += 0.05; // Увеличиваем фазу анимации\r\n            }\r\n\r\n            if (this.currentTheme === \"space\") {\r\n                this.comets.forEach((comet) => {\r\n                    comet.y += comet.speed; // Комета движется вниз\r\n                    if (comet.y > this.canvasSize / this.gridSize) {\r\n                        comet.y = -1; // Перемещаем комету наверх, если она вышла за экран\r\n                    }\r\n                });\r\n            }\r\n\r\n            // Отрисовываем игру\r\n            if (this.$refs.gameCanvas) {\r\n                this.drawGame();\r\n            }\r\n\r\n            // Вычисляем интервал для следующего кадра\r\n            const interval = 1000 / this.frameRate; // Интервал в миллисекундах\r\n            this.gameLoopTimer = setTimeout(() => this.gameLoop(), interval);\r\n        },\r\n        drawGame() {\r\n            const canvas = this.$refs.gameCanvas;\r\n            const ctx = canvas.getContext(\"2d\");\r\n\r\n            // Получаем текущую тему\r\n            const theme = this.themes[this.currentTheme];\r\n\r\n            // Создаём градиент фона\r\n            const gradient = ctx.createLinearGradient(0, 0, this.canvasSize, this.canvasSize);\r\n            gradient.addColorStop(0, theme.background[0]);\r\n            gradient.addColorStop(1, theme.background[1]);\r\n\r\n            // Заливаем фон градиентом\r\n            ctx.fillStyle = gradient;\r\n            ctx.fillRect(0, 0, this.canvasSize, this.canvasSize);\r\n\r\n            // Рисуем траву (только в классической теме)\r\n            if (this.currentTheme === \"classic\") {\r\n                this.grass.forEach((grass) => {\r\n                    const sway = Math.sin(grass.swayPhase + this.grassAnimationPhase) * 5; // Колыхание травы\r\n                    ctx.save(); // Сохраняем состояние контекста\r\n                    ctx.translate(grass.x, grass.y); // Перемещаем начало координат\r\n                    ctx.rotate(sway * Math.PI / 180); // Поворачиваем травинку\r\n\r\n                    // Разный оттенок зелёного для травы\r\n                    ctx.fillStyle = \"#228B22\"\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(0, 0); // Начало травинки\r\n                    ctx.lineTo(-grass.size / 3, -grass.size); // Левая сторона\r\n                    ctx.lineTo(grass.size / 3, -grass.size); // Правая сторона\r\n                    ctx.closePath();\r\n                    ctx.fill();\r\n                    ctx.restore(); // Восстанавливаем состояние контекста\r\n                });\r\n\r\n                // Рисуем цветы\r\n                this.flowers.forEach((flower) => {\r\n                    // Рисуем сердцевину (центральный круг)\r\n                    ctx.fillStyle = flower.coreColor;\r\n                    ctx.beginPath();\r\n                    ctx.arc(flower.x, flower.y, flower.coreSize, 0, Math.PI * 2);\r\n                    ctx.fill();\r\n\r\n                    // Рисуем внешние круги\r\n                    ctx.fillStyle = flower.petalColor;\r\n                    for (let angle = 0; angle < Math.PI * 2; angle += Math.PI / 4) {\r\n                        const petalX = flower.x + Math.cos(angle) * flower.petalSize;\r\n                        const petalY = flower.y + Math.sin(angle) * flower.petalSize;\r\n\r\n                        ctx.beginPath();\r\n                        ctx.arc(petalX, petalY, flower.petalSize / 2, 0, Math.PI * 2);\r\n                        ctx.fill();\r\n                    }\r\n                });\r\n            }\r\n\r\n            // Рисуем змейку\r\n            ctx.fillStyle = theme.snake.fill;\r\n            ctx.strokeStyle = theme.snake.stroke;\r\n            ctx.lineWidth = 2;\r\n\r\n            this.snake.forEach((segment, index) => {\r\n                const radius = this.gridSize / 2;\r\n\r\n                let centerX, centerY;\r\n                if (index === 0) {\r\n                    // Плавные координаты для головы\r\n                    centerX = this.headPosition.x * this.gridSize + radius;\r\n                    centerY = this.headPosition.y * this.gridSize + radius;\r\n                } else {\r\n                    // Дискретные координаты для остальных сегментов\r\n                    centerX = segment.x * this.gridSize + radius;\r\n                    centerY = segment.y * this.gridSize + radius;\r\n                }\r\n\r\n                ctx.beginPath();\r\n                ctx.arc(centerX, centerY, radius - 2, 0, Math.PI * 2);\r\n                ctx.fill();\r\n                ctx.stroke();\r\n            });\r\n\r\n            // Рисуем еду с анимацией\r\n            if (this.food) {\r\n                const hue = Math.sin(this.foodColorPhase) * 30 + 30; // Вычисляем оттенок\r\n                ctx.fillStyle = `hsl(${hue}, 100%, 50%)`;\r\n                ctx.strokeStyle = theme.food.stroke;\r\n                ctx.lineWidth = 2;\r\n                const foodRadius = this.gridSize / 2;\r\n                const foodCenterX = this.food.x * this.gridSize + foodRadius;\r\n                const foodCenterY = this.food.y * this.gridSize + foodRadius;\r\n\r\n                ctx.beginPath();\r\n                ctx.arc(foodCenterX, foodCenterY, foodRadius - 2, 0, Math.PI * 2);\r\n                ctx.fill();\r\n                ctx.stroke();\r\n            }\r\n            // Рисуем звёзды (только в ночной теме)\r\n            if (this.currentTheme === \"night\") {\r\n                this.stars.forEach((star) => {\r\n                    const blink = Math.sin(star.blinkPhase + Date.now() * 0.001) * 0.5 + 0.5; // Мигание\r\n                    const opacity = blink * 0.8 + 0.2; // Яркость звезды\r\n                    ctx.fillStyle = `rgba(255, 255, 255, ${opacity})`;\r\n                    ctx.beginPath();\r\n                    ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);\r\n                    ctx.fill();\r\n                });\r\n            }\r\n            // Рисуем кометы (только в космической теме)\r\n            if (this.currentTheme === \"space\") {\r\n                this.comets.forEach((comet) => {\r\n                    const cometCenterX = comet.x * this.gridSize + this.gridSize / 2;\r\n                    const cometCenterY = comet.y * this.gridSize + this.gridSize / 2;\r\n\r\n                    // Рисуем хвост кометы\r\n                    for (let i = 0; i < 3; i++) {\r\n                        const size = comet.size * (1 - i * 0.3); // Размер уменьшается\r\n                        const opacity = 1 - i * 0.3; // Прозрачность увеличивается\r\n                        ctx.fillStyle = `rgba(255, 255, 255, ${opacity})`; // Белый цвет с прозрачностью\r\n                        ctx.beginPath();\r\n                        ctx.arc(\r\n                            cometCenterX,\r\n                            cometCenterY - i * this.gridSize * 0.2, // Хвост смещается вверх\r\n                            size,\r\n                            0,\r\n                            Math.PI * 2\r\n                        );\r\n                        ctx.fill();\r\n                    }\r\n                });\r\n            }\r\n        },\r\n        spawnFood() {\r\n            const maxX = Math.floor(this.canvasSize / this.gridSize) - 1;\r\n            const maxY = Math.floor(this.canvasSize / this.gridSize) - 1;\r\n\r\n            let newFood;\r\n            let attempts = 0; // Счётчик попыток, чтобы избежать бесконечного цикла\r\n\r\n            do {\r\n                newFood = {\r\n                    x: Math.floor(Math.random() * (maxX + 1)),\r\n                    y: Math.floor(Math.random() * (maxY + 1)),\r\n                };\r\n                attempts++;\r\n            } while (\r\n                this.snake.some(segment => segment.x === newFood.x && segment.y === newFood.y) &&\r\n                attempts < 100 // Ограничиваем количество попыток\r\n            );\r\n\r\n            if (attempts >= 100) {\r\n                console.error(\"Не удалось сгенерировать еду после 100 попыток!\");\r\n                return;\r\n            }\r\n\r\n            this.food = newFood;\r\n        },\r\n        handleKeyDown(event) {\r\n            // Отключаем стандартное поведение для стрелок\r\n            if ([\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"].includes(event.code)) {\r\n                event.preventDefault();\r\n            }\r\n\r\n            if (this.gameOver && event.code === \"Space\") {\r\n                this.startGame();\r\n            }\r\n\r\n            switch (event.code) {\r\n                case \"ArrowUp\":\r\n                    if (this.direction.y === 0) this.direction = { x: 0, y: -1 };\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    if (this.direction.y === 0) this.direction = { x: 0, y: 1 };\r\n                    break;\r\n                case \"ArrowLeft\":\r\n                    if (this.direction.x === 0) this.direction = { x: -1, y: 0 };\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    if (this.direction.x === 0) this.direction = { x: 1, y: 0 };\r\n                    break;\r\n            }\r\n        },\r\n        handleTouchStart(event) {\r\n            const touch = event.touches[0];\r\n            this.touchStartX = touch.clientX;\r\n            this.touchStartY = touch.clientY;\r\n        },\r\n        handleTouchMove(event) {\r\n            event.preventDefault(); // Предотвращаем прокрутку страницы\r\n        },\r\n        handleTouchEnd(event) {\r\n            const touch = event.changedTouches[0];\r\n            const deltaX = touch.clientX - this.touchStartX;\r\n            const deltaY = touch.clientY - this.touchStartY;\r\n\r\n            // Определяем направление в зависимости от разницы координат\r\n            if (Math.abs(deltaX) > Math.abs(deltaY)) {\r\n                if (deltaX > 0 && this.direction.x === 0) this.direction = { x: 1, y: 0 }; // Вправо\r\n                if (deltaX < 0 && this.direction.x === 0) this.direction = { x: -1, y: 0 }; // Влево\r\n            } else {\r\n                if (deltaY > 0 && this.direction.y === 0) this.direction = { x: 0, y: 1 }; // Вниз\r\n                if (deltaY < 0 && this.direction.y === 0) this.direction = { x: 0, y: -1 }; // Вверх\r\n            }\r\n        },\r\n        handleScreenClick() {\r\n            if (this.gameOver) {\r\n                this.startGame();\r\n            }\r\n        },\r\n        playSound(src) {\r\n            const audio = new Audio(src);\r\n            audio.play();\r\n        },\r\n    },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.game-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100vh;\r\n}\r\n\r\n.score-board {\r\n    margin-bottom: 10px;\r\n    font-size: 18px;\r\n}\r\n\r\ncanvas {\r\n    border: 1px solid black;\r\n    background-color: #f0f0f0;\r\n}\r\n\r\n.theme-buttons {\r\n    display: flex;\r\n    justify-content: center;\r\n    gap: 10px;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.theme-buttons button {\r\n    padding: 5px 10px;\r\n    font-size: 14px;\r\n    border: none;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n}\r\n\r\n.theme-buttons button:hover {\r\n    opacity: 0.8;\r\n}\r\n</style>","import { render } from \"./SnakeGame.vue?vue&type=template&id=edee3b64&scoped=true\"\nimport script from \"./SnakeGame.vue?vue&type=script&lang=js\"\nexport * from \"./SnakeGame.vue?vue&type=script&lang=js\"\n\nimport \"./SnakeGame.vue?vue&type=style&index=0&id=edee3b64&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-edee3b64\"]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=01e29237\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { createApp } from 'vue'\nimport App from './App.vue'\n\ncreateApp(App).mount('#app')\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunksnake_game\"] = self[\"webpackChunksnake_game\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(8926); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["id","_createElementBlock","_hoisted_1","_createVNode","_component_SnakeGame","class","key","_createElementVNode","_hoisted_2","onClick","_cache","$event","$options","changeTheme","_hoisted_3","_toDisplayString","$data","score","highScore","ref","width","canvasSize","height","onTouchstart","args","handleTouchStart","onTouchmove","handleTouchMove","onTouchend","handleTouchEnd","_hoisted_4","gameOver","_hoisted_5","_createCommentVNode","data","gridSize","snake","x","y","food","direction","touchStartX","touchStartY","foodColorPhase","flowers","maxFlowers","grass","maxGrass","grassAnimationPhase","comets","cometInterval","maxComets","stars","maxStars","starBlinkInterval","speed","initialSpeed","headPosition","gameLoopTimer","updateInterval","frameRate","lastUpdateTime","currentTheme","themes","classic","background","fill","stroke","night","space","mounted","savedTheme","localStorage","getItem","this","startGame","window","addEventListener","handleKeyDown","startCometSpawning","beforeUnmount","removeEventListener","stopCometSpawning","methods","generateFlowers","i","flower","Math","random","coreSize","petalSize","coreColor","petalColor","push","generateGrass","size","swayPhase","PI","generateStars","star","blinkPhase","spawnComet","length","maxX","newComet","setInterval","clearInterval","themeName","setItem","console","log","drawGame","Date","now","gameLoop","updateGameState","currentTime","deltaTime","head","unshift","spawnFood","playSound","pop","slice","some","segment","requestAnimationFrame","$refs","gameCanvas","forEach","comet","interval","setTimeout","canvas","ctx","getContext","theme","gradient","createLinearGradient","addColorStop","fillStyle","fillRect","sway","sin","save","translate","rotate","beginPath","moveTo","lineTo","closePath","restore","arc","angle","petalX","cos","petalY","strokeStyle","lineWidth","index","radius","centerX","centerY","hue","foodRadius","foodCenterX","foodCenterY","blink","opacity","cometCenterX","cometCenterY","floor","maxY","newFood","attempts","error","event","includes","code","preventDefault","touch","touches","clientX","clientY","changedTouches","deltaX","deltaY","abs","handleScreenClick","src","audio","Audio","play","__exports__","components","SnakeGame","render","createApp","App","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","Object","keys","every","splice","r","d","definition","o","defineProperty","enumerable","get","g","globalThis","Function","e","obj","prop","prototype","hasOwnProperty","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}